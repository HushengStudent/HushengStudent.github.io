---
layout: post
title:  "[设计模式]代理模式(Java实现)"
date:   2015-06-11 23:53:10
categories: 设计模式
comments: true
---

#### ①概述：
为其他对象提供一种代理以控制对这个对象的访问。

#### ②适用性：
1、远程代理（RemoteProxy）为一个对象在不同的地址空间提供局部代表。

2、虚代理（VirtualProxy）根据需要创建开销很大的对象。

3、保护代理（ProtectionProxy）控制对原始对象的访问。

4、智能指引（SmartReference）取代了简单的指针，它在访问对象时执行一些附加操作。

#### ③组成：
1、抽象对象角色：声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象。

2、目标对象角色：定义了代理对象所代表的目标对象。

3、代理对象角色：代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象。代理对象通常在客户端调用传递给目标对象之前或之后，执行某个操作，而不是单纯地将调用传递给目标对象。

实例：

抽象对象角色：
```java
public abstract class AbstractObject {  
    //操作  
    public abstract void operation();  
}  

```
目标对象角色：
```java
public class RealObject extends AbstractObject {  
    @Override  
    public void operation() {  
        //一些操作  
        System.out.println("一些操作");  
    }  
}  
```
代理对象角色：
```java
public class ProxyObject extends AbstractObject{  
    RealObject realObject = new RealObject();  
    @Override  
    public void operation() {  
        //调用目标对象之前可以做相关操作  
        System.out.println("before");          
        realObject.operation();          
        //调用目标对象之后可以做相关操作  
        System.out.println("after");  
    }  
}  
```
验证：
```java
public class Client {  
  
    public static void main(String[] args) {  
        // TODO Auto-generated method stub  
        AbstractObject obj = new ProxyObject();  
        obj.operation();  
    }  
  
}  
```
#### ④应用形式：
1、远程代理：可以隐藏一个对象存在于不同地址空间的事实。也使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。

2、虚拟代理：允许内存开销较大的对象在需要的时候创建。只有我们真正需要这个对象的时候才创建。

3、写入时复制代理：用来控制对象的复制，方法是延迟对象的复制，直到客户真的需要为止。是虚拟代理的一个变体。

4、保护代理：为不同的客户提供不同级别的目标对象访问权限

5、缓存代理：为开销大的运算结果提供暂时存储，它允许多个客户共享结果，以减少计算或网络延迟。

6、防火墙代理：控制网络资源的访问，保护主题免于恶意客户的侵害。

7、同步代理：在多线程的情况下为主题提供安全的访问。

8、智能引用代理：当一个对象被引用时，提供一些额外的操作，比如将对此对象调用的次数记录下来等。

9、复杂隐藏代理：用来隐藏一个类的复杂集合的复杂度，并进行访问控制。有时候也称为外观代理，这不难理解。复杂隐藏代理和外观模式是不一
样的，因为代理控制访问，而外观模式是不一样的，因为代理控制访问，而外观模式只提供另一组接口。
样的，因为代理控制访问，而外观模式是不一样的，因为代理控制访问，而外观模式只提供另一组接口。