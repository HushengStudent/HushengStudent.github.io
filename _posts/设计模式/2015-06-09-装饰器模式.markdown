---
layout: post
title:  "[设计模式]装饰器模式(Java实现)"
date:   2015-06-09 21:53:10
categories: 设计模式
comments: true
---

#### 一、概述：
动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。

#### 二、适用性：
1.在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。

2.处理那些可以撤消的职责。

3.当不能采用生成子类的方法进行扩充时。

#### 三、组成：
1.Component：定义一个对象接口，可以给这些对象动态地添加职责。

2.ConcreteComponent：定义一个对象，可以给这个对象添加一些职责。

3.Decorator：维持一个指向Component对象的指针，并定义一个与Component接口一致的接口。

4.ConcreteDecorator：向组件添加职责。

```java

class Demo{   
    public static void main(String[] args){  
        Man man = new Man();  
        ManDecoratorA md1 = new ManDecoratorA();  
        ManDecoratorB md2 = new ManDecoratorB();  
        
        md1.setPerson(man);  
        md2.setPerson(md1);  
        md2.eat();  
    }  
}  
  
interface Person{  
    void eat();  
}  
  
class Man implements Person{  
    public void eat(){  
        System.out.println("男人在吃");  
    }  
}  
  
  
abstract class Decorator implements Person{  
    protected Person person;     
    public void setPerson(Person person){  
        this.person = person;  
    }     
    public void eat(){  
        person.eat();  
    }  
}  
  
  
  
class ManDecoratorA extends Decorator{  
    public void eat(){  
        super.eat();  
        System.out.println("ManDecoratorA类");  
    }  
}  
class ManDecoratorB extends Decorator{      
    public void eat(){  
        super.eat();  
        System.out.println("ManDecoratorB类");  
    }  
}  
```

![图片](http://owk5gjdrg.bkt.clouddn.com/0013%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.png)

#### 四、总结：
优缺点：

1.装饰者类反应出被装饰的组件类型。

2.装饰者类可以在被装饰者的行为前面或后面加上自己的行为，甚至取代被装饰者的行为，达到特定的目的。

3.可以用无数个装饰者包装一个组件，装饰者类会导致设计中出现许多小对象，过度使用会让程序变的复杂。

4.装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。